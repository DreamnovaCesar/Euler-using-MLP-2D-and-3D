from Article_Euler_Number_Libraries import *


# ?                     # a, b, c, d    e, f, g, h
Input_3D = np.array([   [[0, 0, 0, 0], [0, 0, 0, 0]],
                        [[0, 0, 0, 0], [0, 0, 0, 1]],
                        [[0, 0, 0, 0], [0, 0, 1, 0]],
                        [[0, 0, 0, 0], [0, 0, 1, 1]],
                        [[0, 0, 0, 0], [0, 1, 0, 0]],
                        [[0, 0, 0, 0], [0, 1, 0, 1]],
                        [[0, 0, 0, 0], [0, 1, 1, 0]],
                        [[0, 0, 0, 0], [0, 1, 1, 1]],
                        [[0, 0, 0, 0], [1, 0, 0, 0]],
                        [[0, 0, 0, 0], [1, 0, 0, 1]],
                        [[0, 0, 0, 0], [1, 0, 1, 0]],
                        [[0, 0, 0, 0], [1, 0, 1, 1]],
                        [[0, 0, 0, 0], [1, 1, 0, 0]],
                        [[0, 0, 0, 0], [1, 1, 0, 1]],
                        [[0, 0, 0, 0], [1, 1, 1, 0]],
                        [[0, 0, 0, 0], [1, 1, 1, 1]],
                        [[0, 0, 0, 1], [0, 0, 0, 0]],
                        [[0, 0, 0, 1], [0, 0, 0, 1]],
                        [[0, 0, 0, 1], [0, 0, 1, 0]],
                        [[0, 0, 0, 1], [0, 0, 1, 1]],
                        [[0, 0, 0, 1], [0, 1, 0, 0]],
                        [[0, 0, 0, 1], [0, 1, 0, 1]],
                        [[0, 0, 0, 1], [0, 1, 1, 0]],
                        [[0, 0, 0, 1], [0, 1, 1, 1]],
                        [[0, 0, 0, 1], [1, 0, 0, 0]],
                        [[0, 0, 0, 1], [1, 0, 0, 1]],
                        [[0, 0, 0, 1], [1, 0, 1, 0]],
                        [[0, 0, 0, 1], [1, 0, 1, 1]],
                        [[0, 0, 0, 1], [1, 1, 0, 0]],
                        [[0, 0, 0, 1], [1, 1, 0, 1]],
                        [[0, 0, 0, 1], [1, 1, 1, 0]],
                        [[0, 0, 0, 1], [1, 1, 1, 1]],
                        [[0, 0, 1, 0], [0, 0, 0, 0]],
                        [[0, 0, 1, 0], [0, 0, 0, 1]],
                        [[0, 0, 1, 0], [0, 0, 1, 0]],
                        [[0, 0, 1, 0], [0, 0, 1, 1]],
                        [[0, 0, 1, 0], [0, 1, 0, 0]],
                        [[0, 0, 1, 0], [0, 1, 0, 1]],
                        [[0, 0, 1, 0], [0, 1, 1, 0]],
                        [[0, 0, 1, 0], [0, 1, 1, 1]],
                        [[0, 0, 1, 0], [1, 0, 0, 0]],
                        [[0, 0, 1, 0], [1, 0, 0, 1]],
                        [[0, 0, 1, 0], [1, 0, 1, 0]],
                        [[0, 0, 1, 0], [1, 0, 1, 1]],
                        [[0, 0, 1, 0], [1, 1, 0, 0]],
                        [[0, 0, 1, 0], [1, 1, 0, 1]],
                        [[0, 0, 1, 0], [1, 1, 1, 0]],
                        [[0, 0, 1, 0], [1, 1, 1, 1]],
                        [[0, 0, 1, 1], [0, 0, 0, 0]],
                        [[0, 0, 1, 1], [0, 0, 0, 1]],
                        [[0, 0, 1, 1], [0, 0, 1, 0]],
                        [[0, 0, 1, 1], [0, 0, 1, 1]],
                        [[0, 0, 1, 1], [0, 1, 0, 0]],
                        [[0, 0, 1, 1], [0, 1, 0, 1]],
                        [[0, 0, 1, 1], [0, 1, 1, 0]],
                        [[0, 0, 1, 1], [0, 1, 1, 1]],
                        [[0, 0, 1, 1], [1, 0, 0, 0]],
                        [[0, 0, 1, 1], [1, 0, 0, 1]],
                        [[0, 0, 1, 1], [1, 0, 1, 0]],
                        [[0, 0, 1, 1], [1, 0, 1, 1]],
                        [[0, 0, 1, 1], [1, 1, 0, 0]],
                        [[0, 0, 1, 1], [1, 1, 0, 1]],
                        [[0, 0, 1, 1], [1, 1, 1, 0]],
                        [[0, 0, 1, 1], [1, 1, 1, 1]],
                        [[0, 1, 0, 0], [0, 0, 0, 0]],
                        [[0, 1, 0, 0], [0, 0, 0, 1]],
                        [[0, 1, 0, 0], [0, 0, 1, 0]],
                        [[0, 1, 0, 0], [0, 0, 1, 1]],
                        [[0, 1, 0, 0], [0, 1, 0, 0]],
                        [[0, 1, 0, 0], [0, 1, 0, 1]],
                        [[0, 1, 0, 0], [0, 1, 1, 0]],
                        [[0, 1, 0, 0], [0, 1, 1, 1]],
                        [[0, 1, 0, 0], [1, 0, 0, 0]],
                        [[0, 1, 0, 0], [1, 0, 0, 1]],
                        [[0, 1, 0, 0], [1, 0, 1, 0]],
                        [[0, 1, 0, 0], [1, 0, 1, 1]],
                        [[0, 1, 0, 0], [1, 1, 0, 0]],
                        [[0, 1, 0, 0], [1, 1, 0, 1]],
                        [[0, 1, 0, 0], [1, 1, 1, 0]],
                        [[0, 1, 0, 0], [1, 1, 1, 1]],
                        [[0, 1, 0, 1], [0, 0, 0, 0]],
                        [[0, 1, 0, 1], [0, 0, 0, 1]],
                        [[0, 1, 0, 1], [0, 0, 1, 0]],
                        [[0, 1, 0, 1], [0, 0, 1, 1]],
                        [[0, 1, 0, 1], [0, 1, 0, 0]],
                        [[0, 1, 0, 1], [0, 1, 0, 1]],
                        [[0, 1, 0, 1], [0, 1, 1, 0]],
                        [[0, 1, 0, 1], [0, 1, 1, 1]],
                        [[0, 1, 0, 1], [1, 0, 0, 0]],
                        [[0, 1, 0, 1], [1, 0, 0, 1]],
                        [[0, 1, 0, 1], [1, 0, 1, 0]],
                        [[0, 1, 0, 1], [1, 0, 1, 1]],
                        [[0, 1, 0, 1], [1, 1, 0, 0]],
                        [[0, 1, 0, 1], [1, 1, 0, 1]],
                        [[0, 1, 0, 1], [1, 1, 1, 0]],
                        [[0, 1, 0, 1], [1, 1, 1, 1]],
                        [[0, 1, 1, 0], [0, 0, 0, 0]],
                        [[0, 1, 1, 0], [0, 0, 0, 1]],
                        [[0, 1, 1, 0], [0, 0, 1, 0]],
                        [[0, 1, 1, 0], [0, 0, 1, 1]],
                        [[0, 1, 1, 0], [0, 1, 0, 0]],
                        [[0, 1, 1, 0], [0, 1, 0, 1]],
                        [[0, 1, 1, 0], [0, 1, 1, 0]],
                        [[0, 1, 1, 0], [0, 1, 1, 1]],
                        [[0, 1, 1, 0], [1, 0, 0, 0]],
                        [[0, 1, 1, 0], [1, 0, 0, 1]],
                        [[0, 1, 1, 0], [1, 0, 1, 0]],
                        [[0, 1, 1, 0], [1, 0, 1, 1]],
                        [[0, 1, 1, 0], [1, 1, 0, 0]],
                        [[0, 1, 1, 0], [1, 1, 0, 1]],
                        [[0, 1, 1, 0], [1, 1, 1, 0]],
                        [[0, 1, 1, 0], [1, 1, 1, 1]],
                        [[0, 1, 1, 1], [0, 0, 0, 0]],
                        [[0, 1, 1, 1], [0, 0, 0, 1]],
                        [[0, 1, 1, 1], [0, 0, 1, 0]],
                        [[0, 1, 1, 1], [0, 0, 1, 1]],
                        [[0, 1, 1, 1], [0, 1, 0, 0]],
                        [[0, 1, 1, 1], [0, 1, 0, 1]],
                        [[0, 1, 1, 1], [0, 1, 1, 0]],
                        [[0, 1, 1, 1], [0, 1, 1, 1]],
                        [[0, 1, 1, 1], [1, 0, 0, 0]],
                        [[0, 1, 1, 1], [1, 0, 0, 1]],
                        [[0, 1, 1, 1], [1, 0, 1, 0]],
                        [[0, 1, 1, 1], [1, 0, 1, 1]],
                        [[0, 1, 1, 1], [1, 1, 0, 0]],
                        [[0, 1, 1, 1], [1, 1, 0, 1]],
                        [[0, 1, 1, 1], [1, 1, 1, 0]],
                        [[0, 1, 1, 1], [1, 1, 1, 1]],
                        [[1, 0, 0, 0], [0, 0, 0, 0]],
                        [[1, 0, 0, 0], [0, 0, 0, 1]],
                        [[1, 0, 0, 0], [0, 0, 1, 0]],
                        [[1, 0, 0, 0], [0, 0, 1, 1]],
                        [[1, 0, 0, 0], [0, 1, 0, 0]],
                        [[1, 0, 0, 0], [0, 1, 0, 1]],
                        [[1, 0, 0, 0], [0, 1, 1, 0]],
                        [[1, 0, 0, 0], [0, 1, 1, 1]],
                        [[1, 0, 0, 0], [1, 0, 0, 0]],
                        [[1, 0, 0, 0], [1, 0, 0, 1]],
                        [[1, 0, 0, 0], [1, 0, 1, 0]],
                        [[1, 0, 0, 0], [1, 0, 1, 1]],
                        [[1, 0, 0, 0], [1, 1, 0, 0]],
                        [[1, 0, 0, 0], [1, 1, 0, 1]],
                        [[1, 0, 0, 0], [1, 1, 1, 0]],
                        [[1, 0, 0, 0], [1, 1, 1, 1]],
                        [[1, 0, 0, 1], [0, 0, 0, 0]],
                        [[1, 0, 0, 1], [0, 0, 0, 1]],
                        [[1, 0, 0, 1], [0, 0, 1, 0]],
                        [[1, 0, 0, 1], [0, 0, 1, 1]],
                        [[1, 0, 0, 1], [0, 1, 0, 0]],
                        [[1, 0, 0, 1], [0, 1, 0, 1]],
                        [[1, 0, 0, 1], [0, 1, 1, 0]],
                        [[1, 0, 0, 1], [0, 1, 1, 1]],
                        [[1, 0, 0, 1], [1, 0, 0, 0]],
                        [[1, 0, 0, 1], [1, 0, 0, 1]],
                        [[1, 0, 0, 1], [1, 0, 1, 0]],
                        [[1, 0, 0, 1], [1, 0, 1, 1]],
                        [[1, 0, 0, 1], [1, 1, 0, 0]],
                        [[1, 0, 0, 1], [1, 1, 0, 1]],
                        [[1, 0, 0, 1], [1, 1, 1, 0]],
                        [[1, 0, 0, 1], [1, 1, 1, 1]],
                        [[1, 0, 1, 0], [0, 0, 0, 0]],
                        [[1, 0, 1, 0], [0, 0, 0, 1]],
                        [[1, 0, 1, 0], [0, 0, 1, 0]],
                        [[1, 0, 1, 0], [0, 0, 1, 1]],
                        [[1, 0, 1, 0], [0, 1, 0, 0]],
                        [[1, 0, 1, 0], [0, 1, 0, 1]],
                        [[1, 0, 1, 0], [0, 1, 1, 0]],
                        [[1, 0, 1, 0], [0, 1, 1, 1]],
                        [[1, 0, 1, 0], [1, 0, 0, 0]],
                        [[1, 0, 1, 0], [1, 0, 0, 1]],
                        [[1, 0, 1, 0], [1, 0, 1, 0]],
                        [[1, 0, 1, 0], [1, 0, 1, 1]],
                        [[1, 0, 1, 0], [1, 1, 0, 0]],
                        [[1, 0, 1, 0], [1, 1, 0, 1]],
                        [[1, 0, 1, 0], [1, 1, 1, 0]],
                        [[1, 0, 1, 0], [1, 1, 1, 1]],
                        [[1, 0, 1, 1], [0, 0, 0, 0]],
                        [[1, 0, 1, 1], [0, 0, 0, 1]],
                        [[1, 0, 1, 1], [0, 0, 1, 0]],
                        [[1, 0, 1, 1], [0, 0, 1, 1]],
                        [[1, 0, 1, 1], [0, 1, 0, 0]],
                        [[1, 0, 1, 1], [0, 1, 0, 1]],
                        [[1, 0, 1, 1], [0, 1, 1, 0]],
                        [[1, 0, 1, 1], [0, 1, 1, 1]],
                        [[1, 0, 1, 1], [1, 0, 0, 0]],
                        [[1, 0, 1, 1], [1, 0, 0, 1]],
                        [[1, 0, 1, 1], [1, 0, 1, 0]],
                        [[1, 0, 1, 1], [1, 0, 1, 1]],
                        [[1, 0, 1, 1], [1, 1, 0, 0]],
                        [[1, 0, 1, 1], [1, 1, 0, 1]],
                        [[1, 0, 1, 1], [1, 1, 1, 0]],
                        [[1, 0, 1, 1], [1, 1, 1, 1]],
                        [[1, 1, 0, 0], [0, 0, 0, 0]],
                        [[1, 1, 0, 0], [0, 0, 0, 1]],
                        [[1, 1, 0, 0], [0, 0, 1, 0]],
                        [[1, 1, 0, 0], [0, 0, 1, 1]],
                        [[1, 1, 0, 0], [0, 1, 0, 0]],
                        [[1, 1, 0, 0], [0, 1, 0, 1]],
                        [[1, 1, 0, 0], [0, 1, 1, 0]],
                        [[1, 1, 0, 0], [0, 1, 1, 1]],
                        [[1, 1, 0, 0], [1, 0, 0, 0]],
                        [[1, 1, 0, 0], [1, 0, 0, 1]],
                        [[1, 1, 0, 0], [1, 0, 1, 0]],
                        [[1, 1, 0, 0], [1, 0, 1, 1]],
                        [[1, 1, 0, 0], [1, 1, 0, 0]],
                        [[1, 1, 0, 0], [1, 1, 0, 1]],
                        [[1, 1, 0, 0], [1, 1, 1, 0]],
                        [[1, 1, 0, 0], [1, 1, 1, 1]],
                        [[1, 1, 0, 1], [0, 0, 0, 0]],
                        [[1, 1, 0, 1], [0, 0, 0, 1]],
                        [[1, 1, 0, 1], [0, 0, 1, 0]],
                        [[1, 1, 0, 1], [0, 0, 1, 1]],
                        [[1, 1, 0, 1], [0, 1, 0, 0]],
                        [[1, 1, 0, 1], [0, 1, 0, 1]],
                        [[1, 1, 0, 1], [0, 1, 1, 0]],
                        [[1, 1, 0, 1], [0, 1, 1, 1]],
                        [[1, 1, 0, 1], [1, 0, 0, 0]],
                        [[1, 1, 0, 1], [1, 0, 0, 1]],
                        [[1, 1, 0, 1], [1, 0, 1, 0]],
                        [[1, 1, 0, 1], [1, 0, 1, 1]],
                        [[1, 1, 0, 1], [1, 1, 0, 0]],
                        [[1, 1, 0, 1], [1, 1, 0, 1]],
                        [[1, 1, 0, 1], [1, 1, 1, 0]],
                        [[1, 1, 0, 1], [1, 1, 1, 1]],
                        [[1, 1, 1, 0], [0, 0, 0, 0]],
                        [[1, 1, 1, 0], [0, 0, 0, 1]],
                        [[1, 1, 1, 0], [0, 0, 1, 0]],
                        [[1, 1, 1, 0], [0, 0, 1, 1]],
                        [[1, 1, 1, 0], [0, 1, 0, 0]],
                        [[1, 1, 1, 0], [0, 1, 0, 1]],
                        [[1, 1, 1, 0], [0, 1, 1, 0]],
                        [[1, 1, 1, 0], [0, 1, 1, 1]],
                        [[1, 1, 1, 0], [1, 0, 0, 0]],
                        [[1, 1, 1, 0], [1, 0, 0, 1]],
                        [[1, 1, 1, 0], [1, 0, 1, 0]],
                        [[1, 1, 1, 0], [1, 0, 1, 1]],
                        [[1, 1, 1, 0], [1, 1, 0, 0]],
                        [[1, 1, 1, 0], [1, 1, 0, 1]],
                        [[1, 1, 1, 0], [1, 1, 1, 0]],
                        [[1, 1, 1, 0], [1, 1, 1, 1]],
                        [[1, 1, 1, 1], [0, 0, 0, 0]],
                        [[1, 1, 1, 1], [0, 0, 0, 1]],
                        [[1, 1, 1, 1], [0, 0, 1, 0]],
                        [[1, 1, 1, 1], [0, 0, 1, 1]],
                        [[1, 1, 1, 1], [0, 1, 0, 0]],
                        [[1, 1, 1, 1], [0, 1, 0, 1]],
                        [[1, 1, 1, 1], [0, 1, 1, 0]],
                        [[1, 1, 1, 1], [0, 1, 1, 1]],
                        [[1, 1, 1, 1], [1, 0, 0, 0]],
                        [[1, 1, 1, 1], [1, 0, 0, 1]],
                        [[1, 1, 1, 1], [1, 0, 1, 0]],
                        [[1, 1, 1, 1], [1, 0, 1, 1]],
                        [[1, 1, 1, 1], [1, 1, 0, 0]],
                        [[1, 1, 1, 1], [1, 1, 0, 1]],
                        [[1, 1, 1, 1], [1, 1, 1, 0]],
                        [[1, 1, 1, 1], [1, 1, 1, 1]] ], dtype = int)

Output_3D = np.array([  0, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -1, -1, -1, -1, 0, 0, 0, 0, 0, -1, 0, -1, -1, -1, -1, -1, -1, -2, -1, -2, -1, -1, -1, -1,
                        0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0,
                        0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, -1, 0, -1, 0, 0, 0, 0,
                        0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype = int)

# ?
Input_3D_array = np.array([ [0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 1],
                            [0, 0, 0, 0, 0, 0, 1, 0],
                            [0, 0, 0, 0, 0, 0, 1, 1],
                            [0, 0, 0, 0, 0, 1, 0, 0],
                            [0, 0, 0, 0, 0, 1, 0, 1],
                            [0, 0, 0, 0, 0, 1, 1, 0],
                            [0, 0, 0, 0, 0, 1, 1, 1],
                            [0, 0, 0, 0, 1, 0, 0, 0],
                            [0, 0, 0, 0, 1, 0, 0, 1],
                            [0, 0, 0, 0, 1, 0, 1, 0],
                            [0, 0, 0, 0, 1, 0, 1, 1],
                            [0, 0, 0, 0, 1, 1, 0, 0],
                            [0, 0, 0, 0, 1, 1, 0, 1],
                            [0, 0, 0, 0, 1, 1, 1, 0],
                            [0, 0, 0, 0, 1, 1, 1, 1],
                            [0, 0, 0, 1, 0, 0, 0, 0],
                            [0, 0, 0, 1, 0, 0, 0, 1],
                            [0, 0, 0, 1, 0, 0, 1, 0],
                            [0, 0, 0, 1, 0, 0, 1, 1],
                            [0, 0, 0, 1, 0, 1, 0, 0],
                            [0, 0, 0, 1, 0, 1, 0, 1],
                            [0, 0, 0, 1, 0, 1, 1, 0],
                            [0, 0, 0, 1, 0, 1, 1, 1],
                            [0, 0, 0, 1, 1, 0, 0, 0],
                            [0, 0, 0, 1, 1, 0, 0, 1],
                            [0, 0, 0, 1, 1, 0, 1, 0],
                            [0, 0, 0, 1, 1, 0, 1, 1],
                            [0, 0, 0, 1, 1, 1, 0, 0],
                            [0, 0, 0, 1, 1, 1, 0, 1],
                            [0, 0, 0, 1, 1, 1, 1, 0],
                            [0, 0, 0, 1, 1, 1, 1, 1],
                            [0, 0, 1, 0, 0, 0, 0, 0],
                            [0, 0, 1, 0, 0, 0, 0, 1],
                            [0, 0, 1, 0, 0, 0, 1, 0],
                            [0, 0, 1, 0, 0, 0, 1, 1],
                            [0, 0, 1, 0, 0, 1, 0, 0],
                            [0, 0, 1, 0, 0, 1, 0, 1],
                            [0, 0, 1, 0, 0, 1, 1, 0],
                            [0, 0, 1, 0, 0, 1, 1, 1],
                            [0, 0, 1, 0, 1, 0, 0, 0],
                            [0, 0, 1, 0, 1, 0, 0, 1],
                            [0, 0, 1, 0, 1, 0, 1, 0],
                            [0, 0, 1, 0, 1, 0, 1, 1],
                            [0, 0, 1, 0, 1, 1, 0, 0],
                            [0, 0, 1, 0, 1, 1, 0, 1],
                            [0, 0, 1, 0, 1, 1, 1, 0],
                            [0, 0, 1, 0, 1, 1, 1, 1],
                            [0, 0, 1, 1, 0, 0, 0, 0],
                            [0, 0, 1, 1, 0, 0, 0, 1],
                            [0, 0, 1, 1, 0, 0, 1, 0],
                            [0, 0, 1, 1, 0, 0, 1, 1],
                            [0, 0, 1, 1, 0, 1, 0, 0],
                            [0, 0, 1, 1, 0, 1, 0, 1],
                            [0, 0, 1, 1, 0, 1, 1, 0],
                            [0, 0, 1, 1, 0, 1, 1, 1],
                            [0, 0, 1, 1, 1, 0, 0, 0],
                            [0, 0, 1, 1, 1, 0, 0, 1],
                            [0, 0, 1, 1, 1, 0, 1, 0],
                            [0, 0, 1, 1, 1, 0, 1, 1],
                            [0, 0, 1, 1, 1, 1, 0, 0],
                            [0, 0, 1, 1, 1, 1, 0, 1],
                            [0, 0, 1, 1, 1, 1, 1, 0],
                            [0, 0, 1, 1, 1, 1, 1, 1],
                            [0, 1, 0, 0, 0, 0, 0, 0],
                            [0, 1, 0, 0, 0, 0, 0, 1],
                            [0, 1, 0, 0, 0, 0, 1, 0],
                            [0, 1, 0, 0, 0, 0, 1, 1],
                            [0, 1, 0, 0, 0, 1, 0, 0],
                            [0, 1, 0, 0, 0, 1, 0, 1],
                            [0, 1, 0, 0, 0, 1, 1, 0],
                            [0, 1, 0, 0, 0, 1, 1, 1],
                            [0, 1, 0, 0, 1, 0, 0, 0],
                            [0, 1, 0, 0, 1, 0, 0, 1],
                            [0, 1, 0, 0, 1, 0, 1, 0],
                            [0, 1, 0, 0, 1, 0, 1, 1],
                            [0, 1, 0, 0, 1, 1, 0, 0],
                            [0, 1, 0, 0, 1, 1, 0, 1],
                            [0, 1, 0, 0, 1, 1, 1, 0],
                            [0, 1, 0, 0, 1, 1, 1, 1],
                            [0, 1, 0, 1, 0, 0, 0, 0],
                            [0, 1, 0, 1, 0, 0, 0, 1],
                            [0, 1, 0, 1, 0, 0, 1, 0],
                            [0, 1, 0, 1, 0, 0, 1, 1],
                            [0, 1, 0, 1, 0, 1, 0, 0],
                            [0, 1, 0, 1, 0, 1, 0, 1],
                            [0, 1, 0, 1, 0, 1, 1, 0],
                            [0, 1, 0, 1, 0, 1, 1, 1],
                            [0, 1, 0, 1, 1, 0, 0, 0],
                            [0, 1, 0, 1, 1, 0, 0, 1],
                            [0, 1, 0, 1, 1, 0, 1, 0],
                            [0, 1, 0, 1, 1, 0, 1, 1],
                            [0, 1, 0, 1, 1, 1, 0, 0],
                            [0, 1, 0, 1, 1, 1, 0, 1],
                            [0, 1, 0, 1, 1, 1, 1, 0],
                            [0, 1, 0, 1, 1, 1, 1, 1],
                            [0, 1, 1, 0, 0, 0, 0, 0],
                            [0, 1, 1, 0, 0, 0, 0, 1],
                            [0, 1, 1, 0, 0, 0, 1, 0],
                            [0, 1, 1, 0, 0, 0, 1, 1],
                            [0, 1, 1, 0, 0, 1, 0, 0],
                            [0, 1, 1, 0, 0, 1, 0, 1],
                            [0, 1, 1, 0, 0, 1, 1, 0],
                            [0, 1, 1, 0, 0, 1, 1, 1],
                            [0, 1, 1, 0, 1, 0, 0, 0],
                            [0, 1, 1, 0, 1, 0, 0, 1],
                            [0, 1, 1, 0, 1, 0, 1, 0],
                            [0, 1, 1, 0, 1, 0, 1, 1],
                            [0, 1, 1, 0, 1, 1, 0, 0],
                            [0, 1, 1, 0, 1, 1, 0, 1],
                            [0, 1, 1, 0, 1, 1, 1, 0],
                            [0, 1, 1, 0, 1, 1, 1, 1],
                            [0, 1, 1, 1, 0, 0, 0, 0],
                            [0, 1, 1, 1, 0, 0, 0, 1],
                            [0, 1, 1, 1, 0, 0, 1, 0],
                            [0, 1, 1, 1, 0, 0, 1, 1],
                            [0, 1, 1, 1, 0, 1, 0, 0],
                            [0, 1, 1, 1, 0, 1, 0, 1],
                            [0, 1, 1, 1, 0, 1, 1, 0],
                            [0, 1, 1, 1, 0, 1, 1, 1],
                            [0, 1, 1, 1, 1, 0, 0, 0],
                            [0, 1, 1, 1, 1, 0, 0, 1],
                            [0, 1, 1, 1, 1, 0, 1, 0],
                            [0, 1, 1, 1, 1, 0, 1, 1],
                            [0, 1, 1, 1, 1, 1, 0, 0],
                            [0, 1, 1, 1, 1, 1, 0, 1],
                            [0, 1, 1, 1, 1, 1, 1, 0],
                            [0, 1, 1, 1, 1, 1, 1, 1],
                            [1, 0, 0, 0, 0, 0, 0, 0],
                            [1, 0, 0, 0, 0, 0, 0, 1],
                            [1, 0, 0, 0, 0, 0, 1, 0],
                            [1, 0, 0, 0, 0, 0, 1, 1],
                            [1, 0, 0, 0, 0, 1, 0, 0],
                            [1, 0, 0, 0, 0, 1, 0, 1],
                            [1, 0, 0, 0, 0, 1, 1, 0],
                            [1, 0, 0, 0, 0, 1, 1, 1],
                            [1, 0, 0, 0, 1, 0, 0, 0],
                            [1, 0, 0, 0, 1, 0, 0, 1],
                            [1, 0, 0, 0, 1, 0, 1, 0],
                            [1, 0, 0, 0, 1, 0, 1, 1],
                            [1, 0, 0, 0, 1, 1, 0, 0],
                            [1, 0, 0, 0, 1, 1, 0, 1],
                            [1, 0, 0, 0, 1, 1, 1, 0],
                            [1, 0, 0, 0, 1, 1, 1, 1],
                            [1, 0, 0, 1, 0, 0, 0, 0],
                            [1, 0, 0, 1, 0, 0, 0, 1],
                            [1, 0, 0, 1, 0, 0, 1, 0],
                            [1, 0, 0, 1, 0, 0, 1, 1],
                            [1, 0, 0, 1, 0, 1, 0, 0],
                            [1, 0, 0, 1, 0, 1, 0, 1],
                            [1, 0, 0, 1, 0, 1, 1, 0],
                            [1, 0, 0, 1, 0, 1, 1, 1],
                            [1, 0, 0, 1, 1, 0, 0, 0],
                            [1, 0, 0, 1, 1, 0, 0, 1],
                            [1, 0, 0, 1, 1, 0, 1, 0],
                            [1, 0, 0, 1, 1, 0, 1, 1],
                            [1, 0, 0, 1, 1, 1, 0, 0],
                            [1, 0, 0, 1, 1, 1, 0, 1],
                            [1, 0, 0, 1, 1, 1, 1, 0],
                            [1, 0, 0, 1, 1, 1, 1, 1],
                            [1, 0, 1, 0, 0, 0, 0, 0],
                            [1, 0, 1, 0, 0, 0, 0, 1],
                            [1, 0, 1, 0, 0, 0, 1, 0],
                            [1, 0, 1, 0, 0, 0, 1, 1],
                            [1, 0, 1, 0, 0, 1, 0, 0],
                            [1, 0, 1, 0, 0, 1, 0, 1],
                            [1, 0, 1, 0, 0, 1, 1, 0],
                            [1, 0, 1, 0, 0, 1, 1, 1],
                            [1, 0, 1, 0, 1, 0, 0, 0],
                            [1, 0, 1, 0, 1, 0, 0, 1],
                            [1, 0, 1, 0, 1, 0, 1, 0],
                            [1, 0, 1, 0, 1, 0, 1, 1],
                            [1, 0, 1, 0, 1, 1, 0, 0],
                            [1, 0, 1, 0, 1, 1, 0, 1],
                            [1, 0, 1, 0, 1, 1, 1, 0],
                            [1, 0, 1, 0, 1, 1, 1, 1],
                            [1, 0, 1, 1, 0, 0, 0, 0],
                            [1, 0, 1, 1, 0, 0, 0, 1],
                            [1, 0, 1, 1, 0, 0, 1, 0],
                            [1, 0, 1, 1, 0, 0, 1, 1],
                            [1, 0, 1, 1, 0, 1, 0, 0],
                            [1, 0, 1, 1, 0, 1, 0, 1],
                            [1, 0, 1, 1, 0, 1, 1, 0],
                            [1, 0, 1, 1, 0, 1, 1, 1],
                            [1, 0, 1, 1, 1, 0, 0, 0],
                            [1, 0, 1, 1, 1, 0, 0, 1],
                            [1, 0, 1, 1, 1, 0, 1, 0],
                            [1, 0, 1, 1, 1, 0, 1, 1],
                            [1, 0, 1, 1, 1, 1, 0, 0],
                            [1, 0, 1, 1, 1, 1, 0, 1],
                            [1, 0, 1, 1, 1, 1, 1, 0],
                            [1, 0, 1, 1, 1, 1, 1, 1],
                            [1, 1, 0, 0, 0, 0, 0, 0],
                            [1, 1, 0, 0, 0, 0, 0, 1],
                            [1, 1, 0, 0, 0, 0, 1, 0],
                            [1, 1, 0, 0, 0, 0, 1, 1],
                            [1, 1, 0, 0, 0, 1, 0, 0],
                            [1, 1, 0, 0, 0, 1, 0, 1],
                            [1, 1, 0, 0, 0, 1, 1, 0],
                            [1, 1, 0, 0, 0, 1, 1, 1],
                            [1, 1, 0, 0, 1, 0, 0, 0],
                            [1, 1, 0, 0, 1, 0, 0, 1],
                            [1, 1, 0, 0, 1, 0, 1, 0],
                            [1, 1, 0, 0, 1, 0, 1, 1],
                            [1, 1, 0, 0, 1, 1, 0, 0],
                            [1, 1, 0, 0, 1, 1, 0, 1],
                            [1, 1, 0, 0, 1, 1, 1, 0],
                            [1, 1, 0, 0, 1, 1, 1, 1],
                            [1, 1, 0, 1, 0, 0, 0, 0],
                            [1, 1, 0, 1, 0, 0, 0, 1],
                            [1, 1, 0, 1, 0, 0, 1, 0],
                            [1, 1, 0, 1, 0, 0, 1, 1],
                            [1, 1, 0, 1, 0, 1, 0, 0],
                            [1, 1, 0, 1, 0, 1, 0, 1],
                            [1, 1, 0, 1, 0, 1, 1, 0],
                            [1, 1, 0, 1, 0, 1, 1, 1],
                            [1, 1, 0, 1, 1, 0, 0, 0],
                            [1, 1, 0, 1, 1, 0, 0, 1],
                            [1, 1, 0, 1, 1, 0, 1, 0],
                            [1, 1, 0, 1, 1, 0, 1, 1],
                            [1, 1, 0, 1, 1, 1, 0, 0],
                            [1, 1, 0, 1, 1, 1, 0, 1],
                            [1, 1, 0, 1, 1, 1, 1, 0],
                            [1, 1, 0, 1, 1, 1, 1, 1],
                            [1, 1, 1, 0, 0, 0, 0, 0],
                            [1, 1, 1, 0, 0, 0, 0, 1],
                            [1, 1, 1, 0, 0, 0, 1, 0],
                            [1, 1, 1, 0, 0, 0, 1, 1],
                            [1, 1, 1, 0, 0, 1, 0, 0],
                            [1, 1, 1, 0, 0, 1, 0, 1],
                            [1, 1, 1, 0, 0, 1, 1, 0],
                            [1, 1, 1, 0, 0, 1, 1, 1],
                            [1, 1, 1, 0, 1, 0, 0, 0],
                            [1, 1, 1, 0, 1, 0, 0, 1],
                            [1, 1, 1, 0, 1, 0, 1, 0],
                            [1, 1, 1, 0, 1, 0, 1, 1],
                            [1, 1, 1, 0, 1, 1, 0, 0],
                            [1, 1, 1, 0, 1, 1, 0, 1],
                            [1, 1, 1, 0, 1, 1, 1, 0],
                            [1, 1, 1, 0, 1, 1, 1, 1],
                            [1, 1, 1, 1, 0, 0, 0, 0],
                            [1, 1, 1, 1, 0, 0, 0, 1],
                            [1, 1, 1, 1, 0, 0, 1, 0],
                            [1, 1, 1, 1, 0, 0, 1, 1],
                            [1, 1, 1, 1, 0, 1, 0, 0],
                            [1, 1, 1, 1, 0, 1, 0, 1],
                            [1, 1, 1, 1, 0, 1, 1, 0],
                            [1, 1, 1, 1, 0, 1, 1, 1],
                            [1, 1, 1, 1, 1, 0, 0, 0],
                            [1, 1, 1, 1, 1, 0, 0, 1],
                            [1, 1, 1, 1, 1, 0, 1, 0],
                            [1, 1, 1, 1, 1, 0, 1, 1],
                            [1, 1, 1, 1, 1, 1, 0, 0],
                            [1, 1, 1, 1, 1, 1, 0, 1],
                            [1, 1, 1, 1, 1, 1, 1, 0],
                            [1, 1, 1, 1, 1, 1, 1, 1] ], dtype = int)

Output_3D_array = np.array([  0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 2, 2,
                        0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0,
                        0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 0, 2, 0, 0, 0, 0,
                        0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype = int)

# ?
def data_tabla_input_ouput(Input_3D_array: np.ndarray, Output_3D_array: np.ndarray) -> None:
    """
    _summary_

    _extended_summary_

    Args:
        Input_3D_array (np.ndarray): _description_
        Output_3D_array (np.ndarray): _description_
    """
    print('\n')
    # *
    if(len(Input_3D_array) == len(Output_3D_array)):

        # *
        for i in range(len(Output_3D_array)):
            print('{} ------ {} ------ {}'.format(i, Input_3D_array[i], Output_3D_array[i]))

    else:
        raise AssertionError('Input and output dont have the same length. Input: {}, Output: {}'.format(len(Input_3D_array), len(Output_3D_array)))
    print('\n')

# ?
def bubbleSort(arr: list[int]) -> None:
    """
    _summary_

    _extended_summary_

    Args:
        arr (list[int]): _description_
    """
    # *
    len_array = len(arr)

    # *
    swapped = False

    # *
    for i in range(len_array - 1):
        for j in range(0, len_array - i - 1):
 
            if arr[j] > arr[j + 1]:
                swapped = True
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
         
        if not swapped:
            return

    return arr

# ?
def decimal_to_binary(Decimal_value: int) -> int:
    """
    _summary_

    _extended_summary_

    Args:
        Decimal_value (int): _description_

    Returns:
        int: _description_
    """

    # * Converting decimal to binary and removing the prefix(0b)

    # * Conversion to int and binary
    Decimal_value = int(Decimal_value)
    Binary_value = format(Decimal_value, '08b')

    print(Binary_value)
    print('\n')

    return Binary_value

# ?
def print_array(Sorted_arr: list[int]) -> None:
    """
    _summary_

    _extended_summary_

    Args:
        Sorted_arr (list[int]): _description_
    """

    # *
    print('\n')

    print("Sorted array is: ")
    print('\n')

    # *
    for i in range(len(Sorted_arr)):
        print(" % d " % Sorted_arr[i], end = ",")
    print('\n')

# ?
def index_assign_value(Tuple_index: tuple[int], Tuple_value: tuple[int]) -> Any:
    """
    _summary_

    _extended_summary_

    Args:
        Tuple_index (tuple[int]): _description_
        Tuple_value (tuple[int]): _description_

    Raises:
        AssertionError: _description_

    Returns:
        Any: _description_
    """

    # *
    if(len(Tuple_index) == len(Tuple_value)):
        
        # *
        Emp_array = np.zeros((256), dtype = 'int')
        print('\n')

        # *
        print('{}'.format(Emp_array))
        print('\n')

        #OutList = []
        #print(Output.dtype)
        #print(len(Output))

        # *
        for i in range(len(Tuple_index)):
            print('Position: {} ------- Value: {}'.format(Tuple_index, Tuple_value))
        print('\n')

        # *
        print('{}'.format(len(Tuple_index)))
        print('{}'.format(len(Tuple_value)))
        print('\n')

        # *
        for i, element in enumerate(Emp_array):
            for j, value in enumerate(Tuple_index):
                if Tuple_index[j] == i:

                    Emp_array[i] = Tuple_value[j]
                else:
                    pass
        
        # *
        print('\n')
        print(Emp_array) 

        # *
        print('\n')
        print(Emp_array.dtype) 

    else:
        raise AssertionError('Tuples dont have the same length. Index: {}, Value: {}'.format(len(Tuple_index), len(Tuple_value)))
    print('\n')
    
    return Emp_array

# ?
def table_binary_multi_256(Number_iter: int) -> None:
    """
    _summary_

    _extended_summary_

    Args:
        Number_iter (int): _description_
    """
    
    # *
    Array_prediction = np.zeros((8), dtype = 'int')

    # * Conversion to int
    Number_iter = int(Number_iter)

    # *
    if(Number_iter <= 256):

        for i in range(Number_iter):

            Value = decimal_to_binary(i)

            Array_prediction[0] = Value[0]   # h
            Array_prediction[1] = Value[1]   # g
            Array_prediction[2] = Value[2]   # f
            Array_prediction[3] = Value[3]   # e

            Array_prediction[4] = Value[4]   # d
            Array_prediction[5] = Value[5]   # c
            Array_prediction[6] = Value[6]   # b
            Array_prediction[7] = Value[7]   # a

            print('{}'.format(Array_prediction))
        print('\n')
