from typing import List, Tuple, Dict
from typing import Union, Any

from .Model import Model
from .ModelBuilder import ModelBuilder

from typing import Union

from ..Decorators.DisplayTraining import DisplayTraining

class MLP(Model):
    """
    Multi-layer perceptron (MLP) model for classification or regression problems.

    Parameters:
    -----------
    Input_shape : tuple[int, ...]
        The shape of the input data, excluding the batch size.
    Output_shape : tuple[int, ...]
        The shape of the output data, excluding the batch size.
    JSON_file : str
        The path to the JSON file containing the model architecture.
    Epochs : int
        The number of epochs to train the model.

    Methods:
    --------
    compile_model():
        Compiles the Keras model.
    fit_model():
        Trains the Keras model.
    predict_model(Model, Array) -> Union[None, Any]:
        Makes predictions with the Keras model.

    """

    def __init__(
        self, 
        Input_shape: Tuple[int, ...],
        Output_shape : Tuple[int, ...], 
        JSON_file : str,
        Epochs : int
    ) -> None:
        
        """
        MLP class constructor.

        Parameters:
        -----------
        Input_shape : Tuple[int, ...]
            Tuple containing the shape of the input data.
        Output_shape : Tuple[int, ...]
            Tuple containing the shape of the output data.
        JSON_file : str
            File containing the model architecture in JSON format.
        Epochs : int
            Number of epochs for training the model.

        Returns:
        --------
        None
        """

        self.Input_shape = Input_shape;
        self.Output_shape = Output_shape;
        self.Epochs = Epochs;

        print(self.Input_shape)
        print(self.Output_shape)

        self.Model, self.Parameters = ModelBuilder.build_model(
                                        self.Input_shape,
                                        JSON_file
                                    );

    def compile_model(self) -> None:
        """
        Compile the neural network model.
        """
        
        self.Model.compile(
            optimizer = self.Parameters[0], 
            loss = self.Parameters[1], 
            metrics = [self.Parameters[2]]
        );

    @DisplayTraining.display
    def fit_model(self) -> Tuple[Any, Dict[str, Any]]:
        """
        Train the neural network model.

        Parameters:
        -----------
        None

        Returns:
        --------
        Tuple[Any, Dict[str, Any]]
            A tuple containing the trained model and history data.
        """

        Hist_data = self.Model.fit(
            self.Input_shape, 
            self.Output_shape, 
            batch_size = 8, 
            epochs = self.Epochs, 
            verbose = True
        );

        return self.Model, Hist_data
    
    @staticmethod
    def predict_model(Model, Array) -> Union[None, Any]:
        """
        Generate predictions for input data using the trained model.

        Parameters:
        -----------
        Model : Any
            Trained neural network model.
        Array : np.ndarray
            Input data for which predictions are to be generated.

        Returns:
        --------
        Union[None, Any]
            Prediction generated by the neural network model.
        """

        return Model.predict(Array)
    